// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/user/login": {
            "post": {
                "description": "Authenticate a user by providing email or national ID and password to receive a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully with a JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Incorrect credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/user/signup": {
            "post": {
                "description": "Register a new user by providing email, national ID, password, and other optional details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Signup",
                "parameters": [
                    {
                        "description": "User Signup Request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully with a JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "User already exists with this email or national ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AnonymityLevel": {
            "type": "string",
            "enum": [
                "All",
                "CreatorOrAdmin",
                "Invisible"
            ],
            "x-enum-varnames": [
                "VisibleToAll",
                "CreatorOrAdmin",
                "Invisible"
            ]
        },
        "models.ConditionalLogic": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "option_id": {
                    "description": "Option that triggers this condition",
                    "type": "integer"
                },
                "question_id": {
                    "description": "The question this condition belongs to",
                    "type": "integer"
                },
                "target_question_id": {
                    "description": "Question to be shown if the condition is met",
                    "type": "integer"
                }
            }
        },
        "models.Name": {
            "type": "string",
            "enum": [
                "CanView",
                "CanViewVote",
                "CanVote",
                "CanEdit",
                "CanChangeRole",
                "CanViewReports"
            ],
            "x-enum-varnames": [
                "CanView",
                "CanViewVote",
                "CanVote",
                "CanEdit",
                "CanChangeRole",
                "CanViewReports"
            ]
        },
        "models.Notification": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_read": {
                    "type": "boolean"
                },
                "message": {
                    "description": "Detailed message",
                    "type": "string"
                },
                "title": {
                    "description": "Notification title",
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.Option": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "question_id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "models.OrderType": {
            "type": "string",
            "enum": [
                "Sequential",
                "Random"
            ],
            "x-enum-varnames": [
                "Sequential",
                "Random"
            ]
        },
        "models.Permission": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "$ref": "#/definitions/models.Name"
                },
                "questionnaires": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Questionnaire"
                    }
                },
                "users": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.Question": {
            "type": "object",
            "properties": {
                "conditional_logic": {
                    "description": "One-to-One or One-to-Many relationship with ConditionalLogic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConditionalLogic"
                    }
                },
                "correct_option_id": {
                    "description": "If it has a correct option, store its ID",
                    "type": "integer"
                },
                "has_correct_option": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "media": {
                    "description": "URL or path of image, video, audio, or file (optional)",
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Option"
                    }
                },
                "order": {
                    "description": "Position in sequential order",
                    "type": "integer"
                },
                "questionnaire_id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.Type"
                }
            }
        },
        "models.Questionnaire": {
            "type": "object",
            "properties": {
                "age_restriction": {
                    "type": "integer"
                },
                "allow_return": {
                    "type": "boolean"
                },
                "anonymityLevel": {
                    "$ref": "#/definitions/models.AnonymityLevel"
                },
                "creation_time": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "gender_restriction": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location_restriction": {
                    "type": "string"
                },
                "max_participation": {
                    "type": "integer"
                },
                "orderType": {
                    "$ref": "#/definitions/models.OrderType"
                },
                "owner": {
                    "$ref": "#/definitions/models.User"
                },
                "owner_id": {
                    "type": "integer"
                },
                "permissions": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Question"
                    }
                },
                "response_time": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "withdrawal_deadline": {
                    "type": "string"
                }
            }
        },
        "models.Response": {
            "type": "object",
            "properties": {
                "answer": {
                    "description": "User's answer (encrypted)",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_withdrawn": {
                    "type": "boolean"
                },
                "question_id": {
                    "type": "integer"
                },
                "questionnaire_id": {
                    "type": "integer"
                },
                "secret": {
                    "description": "Unique secret for each vote",
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Who submitted the response",
                    "type": "integer"
                }
            }
        },
        "models.Role": {
            "type": "string",
            "enum": [
                "SuperAdmin",
                "User"
            ],
            "x-enum-varnames": [
                "SuperAdmin",
                "Guest"
            ]
        },
        "models.Type": {
            "type": "string",
            "enum": [
                "MultipleChoice",
                "Descriptive"
            ],
            "x-enum-varnames": [
                "MultipleChoice",
                "Descriptive"
            ]
        },
        "models.User": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "national_id": {
                    "type": "string"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Notification"
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                },
                "questionnaires": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Questionnaire"
                    }
                },
                "responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Response"
                    }
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_balance": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "online Questionnaire",
	Description:      "Questionnaire Management System API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
